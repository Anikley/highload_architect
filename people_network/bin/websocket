#!/usr/bin/env node
/* eslint-disable no-console */
/* eslint-disable no-undef */
var WebSocketServer = require("websocket").server;
var http = require("http");
const dialogservice = require("../services/dialogService");

const sql = require("../db");

var server = http.createServer(function(request, response) {
    console.log((new Date()) + " Received request for " + request.url);
    response.writeHead(404);
    response.end();
});

server.listen(5000, function() {
    console.log((new Date()) + " Server is listening on port 5000");
});

wsServer = new WebSocketServer({
    httpServer: server,
    autoAcceptConnections: false
});

function originIsAllowed(origin) {
    console.log(origin);
    return true;
}


/**
 * Выбрать все новости для пользователя
 * consumerGroup - чьи топики читаем
 * каждый топик отвечает за автора обновлений
 */
getAll = async(friends) => {
    try {
        return await dialogservice.getAll(friends);
    }
    catch (err ) {
        console.log("error: ", err);
    }
};

function getAllFriends (mylogin) {
    return new Promise((resolve, reject) => {
        sql.query(
            `SELECT * FROM person JOIN  (SELECT links.Person1_ID, links.Person2_ID FROM links WHERE ( links.Person1_ID in (SELECT Id FROM person WHERE person.Login = '${mylogin}') OR links.Person2_ID in ((SELECT Id FROM person WHERE person.Login = '${mylogin}')))) as res WHERE (res.Person1_ID = person.Id OR res.Person2_ID = person.Id) AND person.Login <> '${mylogin}'`,
            (err, result) => {
                if (err) {
                    // eslint-disable-next-line no-console
                    console.log("error: ", err);
                    reject(err);
                }
                if (!err) resolve(JSON.parse(JSON.stringify(result)));
            }
        );
    });
}

wsServer.on("request", async (request) => {
    if (!originIsAllowed(request.origin)) {
        request.reject();
        console.log((new Date()) + " Connection from origin " + request.origin + " rejected.");
        return;
    }
    var cachedfriends = await getAllFriends(request.resourceURL.pathname.substring(1, request.resourceURL.pathname.length));


    var connection = request.accept("echo-protocol", request.origin);

    connection.on("message", async () => {
        setInterval(() => {
            getAll(cachedfriends.map(x => x.ID.toString()).join()).then ((data) => {
                connection.sendUTF((data.data.value));
            });
        }, 5000);
    });

    connection.on("close", function() {
        console.log((new Date()) + " Peer " + connection.remoteAddress + " disconnected.");
    });
});